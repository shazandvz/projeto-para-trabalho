import sqlite3
import tkinter as tk
from tkinter import messagebox, ttk

# Função para criar ou conectar ao banco de dados
def conectar_banco():
    conn = sqlite3.connect('petshop.db')
    return conn

# Função para criar a tabela de pets
def criar_tabela():
    conn = conectar_banco()
    cursor = conn.cursor()
    cursor.execute('''
    CREATE TABLE IF NOT EXISTS pets (
        id INTEGER PRIMARY KEY AUTOINCREMENT,
        nome TEXT NOT NULL,
        tipo TEXT NOT NULL,
        idade INTEGER NOT NULL
    )
    ''')
    conn.commit()
    conn.close()

# Função para adicionar um novo pet
def adicionar_pet(nome, tipo, idade):
    conn = conectar_banco()
    cursor = conn.cursor()
    cursor.execute('INSERT INTO pets (nome, tipo, idade) VALUES (?, ?, ?)', (nome, tipo, idade))
    conn.commit()
    conn.close()
    messagebox.showinfo("Sucesso", "Pet adicionado com sucesso!")
    listar_pets()

# Função para atualizar informações de um pet
def atualizar_pet(id_pet, nome, tipo, idade):
    conn = conectar_banco()
    cursor = conn.cursor()
    cursor.execute('UPDATE pets SET nome = ?, tipo = ?, idade = ? WHERE id = ?', (nome, tipo, idade, id_pet))
    conn.commit()
    conn.close()
    messagebox.showinfo("Sucesso", "Pet atualizado com sucesso!")
    listar_pets()

# Função para deletar um pet
def deletar_pet(id_pet):
    conn = conectar_banco()
    cursor = conn.cursor()
    cursor.execute('DELETE FROM pets WHERE id = ?', (id_pet,))
    conn.commit()
    conn.close()
    messagebox.showinfo("Sucesso", "Pet deletado com sucesso!")
    listar_pets()

# Função para listar todos os pets
def listar_pets():
    for row in tree.get_children():
        tree.delete(row)
    
    conn = conectar_banco()
    cursor = conn.cursor()
    cursor.execute('SELECT * FROM pets')
    pets = cursor.fetchall()
    conn.close()
    
    for pet in pets:
        tree.insert("", "end", values=(pet[0], pet[1], pet[2], pet[3]))

# Função chamada quando o botão "Adicionar" é clicado
def on_add():
    nome = entry_nome.get()
    tipo = entry_tipo.get()
    idade = entry_idade.get()

    if nome and tipo and idade.isdigit():
        adicionar_pet(nome, tipo, int(idade))
        entry_nome.delete(0, tk.END)
        entry_tipo.delete(0, tk.END)
        entry_idade.delete(0, tk.END)
    else:
        messagebox.showwarning("Entrada Inválida", "Por favor, preencha todos os campos corretamente.")

# Função chamada quando o botão "Atualizar" é clicado
def on_update():
    selected_item = tree.selection()
    if selected_item:
        item = tree.item(selected_item)
        id_pet = item['values'][0]
        nome = entry_nome.get()
        tipo = entry_tipo.get()
        idade = entry_idade.get()

        if nome and tipo and idade.isdigit():
            atualizar_pet(id_pet, nome, tipo, int(idade))
            entry_nome.delete(0, tk.END)
            entry_tipo.delete(0, tk.END)
            entry_idade.delete(0, tk.END)
        else:
            messagebox.showwarning("Entrada Inválida", "Por favor, preencha todos os campos corretamente.")
    else:
        messagebox.showwarning("Seleção Inválida", "Por favor, selecione um pet para atualizar.")

# Função chamada quando o botão "Deletar" é clicado
def on_delete():
    selected_item = tree.selection()
    if selected_item:
        item = tree.item(selected_item)
        id_pet = item['values'][0]
        deletar_pet(id_pet)
    else:
        messagebox.showwarning("Seleção Inválida", "Por favor, selecione um pet para deletar.")

# Criar a interface gráfica
root = tk.Tk()
root.title("Pet Shop")

# Criar os campos de entrada
frame = tk.Frame(root)
frame.pack(pady=20)

tk.Label(frame, text="Nome:").grid(row=0, column=0)
entry_nome = tk.Entry(frame)
entry_nome.grid(row=0, column=1)

tk.Label(frame, text="Tipo:").grid(row=1, column=0)
entry_tipo = tk.Entry(frame)
entry_tipo.grid(row=1, column=1)

tk.Label(frame, text="Idade:").grid(row=2, column=0)
entry_idade = tk.Entry(frame)
entry_idade.grid(row=2, column=1)

# Botões
btn_adicionar = tk.Button(frame, text="Adicionar", command=on_add)
btn_adicionar.grid(row=3, column=0, pady=10)

btn_atualizar = tk.Button(frame, text="Atualizar", command=on_update)
btn_atualizar.grid(row=3, column=1, pady=10)

btn_deletar = tk.Button(frame, text="Deletar", command=on_delete)
btn_deletar.grid(row=3, column=2, pady=10)

# Tabela para listar os pets
tree = ttk.Treeview(root, columns=("ID", "Nome", "Tipo", "Idade"), show='headings')
tree.heading("ID", text="ID")
tree.heading("Nome", text="Nome")
tree.heading("Tipo", text="Tipo")
tree.heading("Idade", text="Idade")
tree.pack(pady=20)



# Criar a tabela no banco de dados se não existir
criar_tabela()
listar_pets()

root.mainloop()
